TODO:
	1. checker
		1.2 Argument check
			+ number of arguments
			+ only digit
			+ inside int range
			+ check for invalid duplicates
			+ Create parent function for read_arg_str() and read_args()
			+ Parse 1st arg as a string of integers if only 1 arg
			+ malloc check stack
			+ Norm check checker files
		1.3 Create stack
			+ create two linked lists (populate stack a + empty stack b)
				+ 1st argument = top element of stack a
		1.4 Read insructions from stdin
			+ read from stdin
			+ validate all instructions
		1.5 Execute instructions on stack
			+ give each command a commandID
			+ create jump table
			+ execute array of commandIDs with jump table
			+ swap_a + swap_b + swap_a_b
			+ push_a + push_b
			+ rotate_a + rotate_b + rotate_a_b
			+ rev_rotate_a + rev_rotate_b + rev_rotate_a_b
		1.6 Error handling
			+ display "Error\n" on stderr
			+ free linked list
		1.7	Evaluation
			+ IF stack A is sorted AND stack B is empty
				+ THEN display "OK\n"
			+ In any other case display "KO\n"
	2. push_swap
		2.1	Argument check
			+ Read multiple arguments as one string
			+ Read multiple arguments as list of args
			+ Copy arg reading from checker.c
		2.2	Sort
			+ 1 Value
			+ 2 Values
			+ 3 Values
			- 5 Values
	3. Misc
		+	Makefile compiles only if necessary
		-	ssize_t ft_putchar
			-	protect each write
		+	include CFLAGS in makefile compilation step
		-	create tests (criterion?)
		+	delete debug files/functions before submitting project
		3.1	Sorting algorithms
			Level 1:
				+	Bubble Sort
				+	Selection Sort - VERY FEW SWAPS!!!
				+	Insertion Sort
			Level 2:
				+	Merge Sort
				+	Quick Sort
				-	Heap Sort
			Level 3:
				-	Tim Sort
				-	
	4. Bonus
		+ Debug option -v that can display the stackâ€™s status 
			after each operation
		+ Slow motion option that enables to execute the next
			instruction after hitting ENTER.
		- delete unnecassary bonus flags?
	5.	Test phase
		- Write testscript for each case
		- Check for "Error\n" on failed cases

In progress:
	+	add -e flag to help page
	+	add -e flag to code
	-	display print process x/n
	-	allow only 1 option

+++++++++++ NOTES ++++++++++++

Valid instructions:
ID  NAME
0.	sa
1.	sb
2.	ss
3.	pa
4.	pb
5.	ra
6.	rb
7.	rr
8.	rra
9.	rrb
10.	rrr


					Bottom -> Top			/* Must be sorted from top to bottom */
$>./checker 3 2 1 0 //	0 1 2 3	| - - - -
rra					// 	1 2 3 0 | - - - -
pb					//	1 2 3 - | 0 - - -
ra					//	3 1 2 - | 0 - - -
sa					//	3 2 1 - | 0 - - -
pa					//	3 2 1 0 | - - - -
OK

$>./checker 3 2 1 0 //	0 1 2 3	| - - - -
rra					// 	1 2 3 0 | - - - -
pb					//	1 2 3 - | 0 - - -
sa					//	1 3 2 - | 0 - - -
rra					//	3 2 1 - | 0 - - -
pa					//	3 2 1 0 | - - - -
OK



$>./checker 3 2 1 0
sa					//
rra					//
pb					//
KO
$>./checker 3 2 one 0
Error

I:	Index
V:	Value
P:	Position (sorted)

I	V	P
1,	3,	2
2,	5,	3
3,	2,	1
4,	10,	4

Idea selection_sort:
	1.	+ Find min value in stack_a
	2.	+ Push min value from stack_a to stack_b
	3.	+ Repeat 2. step until stack_a is empty
	4.	+ Push every element from stack_b to stack_a

Idea sort six:

-	push to stack_b sort_ids:
-	find which is nearest
	-	0, 1, 2
	-	1, 2, 3
	-	3, 4, 5
	-	4, 5, 0
	-	5, 0, 1

	1.	if top_a < median ?
		True - pb
	2.	if stack_a[top] > stack_a[top - 1]
		True - sa
		False - 
			if

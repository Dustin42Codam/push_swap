TODO:
	1. checker
		1.2 Argument check
			+ number of arguments
			+ only digit
			+ inside int range
			+ check for invalid duplicates
			+ Create parent function for read_arg_str() and read_args()
			+ Parse 1st arg as a string of integers if only 1 arg
			- malloc check stack
			- Norm check checker.c
		1.3 Create stack
			+ create two linked lists (populate stack a + empty stack b)
				+ 1st argument = top element of stack a
		1.4 Read insructions from stdin
			+ read from stdin
			+ validate all instructions
		1.5 Execute instructions on stack
			+ give each command a commandID
			+ create jump table
			+ execute array of commandIDs with jump table
			+ swap_a + swap_b + swap_a_b
			+ push_a + push_b
			+ rotate_a + rotate_b + rotate_a_b
			+ rev_rotate_a + rev_rotate_b + rev_rotate_a_b
		1.6 Error handling
			+ display "Error\n" on stderr
			+ free linked list
		1.7	Evaluation
			- IF stack A is sorted AND stack B is empty
				- THEN display "OK\n"
			- In any other case display "KO\n"
	2. push_swap
		2.1	Argument check
			- Copy arg reading from checker.c
	3. Misc
		-	ssize_t ft_putchar
			-	protect each write
		-	include CFLAGS in makefile compilation step
		-	create tests (criterion?)
	4. Bonus
		+ Debug option -v that can display the stackâ€™s status 
			after each operation
		+ Slow motion option that enables to execute the next
			instruction after hitting enter.
		- -h flag to print out usage
		- delete unnecassary bonus flags?

In progress:
	1.	Checker
		-	norm check
	2.	push_swap
		-	Test passing instructions to checker
		-	create simple sorting algorithm

Done:
	+ author file
	+ Makefile
	+ Add Libft
	1.2 Argument check
	1.3 Create stacks


+++++++++++ NOTES ++++++++++++

Valid instructions:
ID  NAME
0.	sa
1.	sb
2.	ss
3.	pa
4.	pb
5.	ra
6.	rb
7.	rr
8.	rra
9.	rrb
10.	rrr


					Bottom -> Top			/* Must be sorted from top to bottom */
$>./checker 3 2 1 0 //	0 1 2 3	| - - - -
rra					// 	1 2 3 0 | - - - -
pb					//	1 2 3 - | 0 - - -
ra					//	3 1 2 - | 0 - - -
sa					//	3 2 1 - | 0 - - -
pa					//	3 2 1 0 | - - - -
OK

$>./checker 3 2 1 0 //	0 1 2 3	| - - - -
rra					// 	1 2 3 0 | - - - -
pb					//	1 2 3 - | 0 - - -
sa					//	1 3 2 - | 0 - - -
rra					//	3 2 1 - | 0 - - -
pa					//	3 2 1 0 | - - - -
OK



$>./checker 3 2 1 0
sa					//
rra					//
pb					//
KO
$>./checker 3 2 one 0
Error

